generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/@prisma-postgres/client"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"

  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

  schemas = ["private", "public"]
}

model Installation {
  db_id Int @id @default(autoincrement())

  event_id   String
  event_name String
  id         Int    @unique
  account    Int
  sender     Int
  created_at String
  updated_at String

  db_created_at DateTime  @default(now())
  db_updated_at DateTime  @updatedAt()
  db_deleted_at DateTime?
  db_deleted    Boolean   @default(false)

  InstallationAccount User @relation(name: "Installation_Account", fields: [account], references: [id], map: "installation_user_account")
  InstallationSender  User @relation(name: "Installation_Sender", fields: [sender], references: [id], map: "installation_user_sender")

  @@map("installation")
  @@schema("private")
}

model User {
  db_id Int @id @default(autoincrement())

  login               String
  id                  Int       @unique
  node_id             String
  avatar_url          String
  gravatar_id         String
  url                 String
  html_url            String
  following_url       String
  followers_url       String
  gists_url           String
  starred_url         String
  subscriptions_url   String
  organizations_url   String
  repos_url           String
  events_url          String
  received_events_url String
  type                String
  site_admin          Boolean
  db_created_at       DateTime  @default(now())
  db_updated_at       DateTime  @updatedAt()
  db_deleted_at       DateTime?
  db_deleted          Boolean   @default(false)

  AccountUser Installation[] @relation("Installation_Account")
  SenderUser  Installation[] @relation("Installation_Sender")
  Page        Page[]

  @@map("user")
  @@schema("private")
}

enum EnumPageType {
  INDEX
  BLOG
  PROJECT
  ROUTE
  PATH
  POST

  @@map("enum_page_types")
  @@schema("private")
}

model Page {
  db_id           Int    @id @default(autoincrement())
  db_user_id      Int
  db_display_name String
  display_name    String

  type    Int
  id      Int
  node_id String
  name    String

  db_blob_name String
  db_blob_url  String
  private      Boolean
  User         User     @relation(fields: [db_user_id], references: [db_id])
  Type         PageType @relation(fields: [type], references: [id])

  @@map("page_content")
  @@schema("private")
}

model PageType {
  id Int @id @default(autoincrement())

  type EnumPageType @unique

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt()
  deleted_at DateTime?
  deleted    Boolean   @default(false)

  Page Page[]

  @@map("page_types")
  @@schema("private")
}
